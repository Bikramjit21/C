// Linked list Insertion
#include <stdio.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node * next;
};

// Normal traversal of the linked list
void Traversal (struct Node* ptr){
    while(ptr!=NULL)
    {   
        printf("%d\n", ptr->data);
        ptr = ptr->next;
    }
}

// Case 1: Insert at the beginning of the linked list
struct Node * insertatfirst(struct Node * head, int data){
    struct Node * ptr = (struct Node *) malloc(sizeof(struct Node));
    ptr->next=head;
    ptr->data=data;
    return ptr;
}

// Case 2: Insert in between the linked list
struct Node * insertatindex(struct Node * head, int data,int index){
    struct Node * ptr = (struct Node *) malloc(sizeof(struct Node));
    struct Node * p = head;
    int i=0;
    while(i!=index-1){
        p = p->next;
        i++;
    }
    ptr->data = data;
    ptr->next = p->next;
    p->next = ptr;
    return head;
}

// Case 3: Insert at the end of the linked list 
struct Node * insertatend(struct Node * head, int data){
    struct Node * ptr = (struct Node *) malloc(sizeof(struct Node));
    ptr->data=data;
    struct Node * p = head;
    while(p->next!=NULL){
        p=p->next;
    }
    p->next = ptr;
    ptr->next=NULL;
    return head;
}

// Case 4: Insert after a node in the linked list
struct Node * insertafternode(struct Node * head, struct Node * preNode, int data){
    struct Node * ptr = (struct Node *) malloc(sizeof(struct Node));
    ptr->data=data;
    ptr->next = preNode->next;
    preNode->next = ptr;
    return head;
}

int main()
{
    struct Node * head;
    struct Node * second;
    struct Node * third;
    
    // Allocate memory for nodes in the linked list in Heap
    head = (struct Node *) malloc(sizeof(struct Node));
    second = (struct Node *) malloc(sizeof(struct Node));
    third = (struct Node *) malloc(sizeof(struct Node));
    
    // Link first and second nodes
    head->data=7;
    head->next=second;
    
    // Link second and third nodes
    second->data=11;
    second->next=third;
    
    // Terminate the list at the third node
    third->data=15;
    third->next=NULL;
    
    printf("Normal traversal of the linked list: \n");
    Traversal(head);
    printf("\n");
    printf("Insert at the beginning of the linked list: \n");
    head = insertatfirst(head,56);
    Traversal(head);
    printf("\n");
    printf("Insert in between the linked list: \n");
    head = insertatindex(head,66,1);
    Traversal(head);
    printf("\n");
    printf("Insert at the end of the linked list: \n");
    head = insertatend(head,56);
    Traversal(head);
    printf("\n");
    printf("Insert after a node in the linked list: \n");
    head = insertafternode(head,second,45);
    Traversal(head);
    return 0;
}
